<?php

/**
 * @file
 * Contains community_notifier.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\comment\CommentInterface;
use \Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function community_notifier_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the community_notifier module.
    case 'help.page.community_notifier':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function community_notifier_theme() {
  return [
    'community_notifier' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function community_notifier_comment_insert(CommentInterface $comment) {
  $commentedEntityId = $comment->getCommentedEntityId();
  $notificationEntities = \Drupal::service('community_notifier.nodeflags')->getNotificationEntitiesById($commentedEntityId,
    \Drupal::currentUser()->id());
  $currentUser = \Drupal::currentUser()->getEmail();
  foreach ($notificationEntities as $notificationEntity) {
    /*if ($notificationEntity->getFrequency() == 'immediately' && $currentUser != $notificationEntity->getOwner()->getEmail()) {
      community_notifier_emailer('community_notifier', 'comment_insert_alert', $notificationEntity->getOwner()->getEmail(),
        $comment->getSubject(), $comment->get('comment_body')->value, $notificationEntity->getOwner()->getUsername());
    }*/
    $frequency = $notificationEntity->getFrequency();
    if ($frequency == 'immediately'){
      community_notifier_emailer('community_notifier', 'comment_insert_alert', $notificationEntity->getOwner()->getEmail(),
        $comment->getSubject(), $comment->get('comment_body')->value, $notificationEntity->getOwner()->getUsername());
    }
  }
}
/**
 * Implements hook_theme().
 */
function community_notifier_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'comment_insert_alert':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['subject']), $options);
      $message['body'][] = $params['message'];
      break;
    case 'query_mail':
      drupal_set_message('queued');
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['subject']));
      $message['body'][] = $params['message'];
      break;
  }
}
/**
 * @param $module see hook_mail documentation.
 * @param $key see hook_mail documentation.
 * @param $to see hook_mail documentation.
 * @param $subject see hook_mail documentation.
 * @param $message see hook_mail documentation.
 * @param $username drupal username of entity receiving the email.
 */
function community_notifier_emailer($module, $key, $to, $subject, $message, $username) {
  $mailManager = \Drupal::service('plugin.manager.mail');
  $params['message'] = $message;
  $params['subject'] = $subject;
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, true);
  if ($result['result'] !== true) {
    \Drupal::logger('community_notifier')->error(t('There was a problem sending an email to user '.$username));
  }
}
/**
 * Implements hook_form_alter().
 */
function community_notifier_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'community_notifier_frequency_edit_form'){
    $form['name']['#disabled'] = TRUE;
    $form['flag_id']['#disabled'] = TRUE;
    $form['entity_id']['#disabled'] = TRUE;
    $form['entity_name']['#disabled'] = TRUE;
    $dropdown_array = [
      'immediately' => 'immediately',
      'daily' => 'daily',
      'weekly' => 'weekly'
    ];
    $form['frequency']['widget'][0]['value'] = array(
      '#type' => 'select',
      '#default_value' => '1',
      '#options' => $dropdown_array,
    );
  }
}

function communityNnotifierEmailQueue($to, $subject, $message) {
  /*$data['to'] = 'amacevitt@drupal.local';
  $data['subject'] = 'Testing queue system';
  $data['message'] = 'This is message of testing';*/
  $data['to'] = $to;
  $data['subject'] = $subject;
  $data['message'] = $message;

  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get('email_queue');
  $queue->createQueue();
  $queue->createItem($data);
}

function community_notifier_cron(){
  $daily_interval = 60; //to be got from the configration settings (community_notifier.config.yml)
  $weekly_interval = 120; //to be got from configration settings (community_notifier.config.yml)

  $next_daily_execution  = \Drupal::state()->get('community_notifier.daily_next_execution');
  $next_daily_execution = !empty($next_daily_execution) ? $next_daily_execution : 0;

  if (\Drupal::time()->getRequestTime() >= $next_daily_execution){
    $comments = \Drupal::service('community_notifier.nodeflags')->getComments('daily');
    foreach ($comments as $comment){
      communityNnotifierEmailQueue($comment['email'], $comment['comments']['subject'], $comment['comments']['body']);
    }
    \Drupal::state()->set('community_notifier.daily_next_execution', \Drupal::time()->getRequestTime() + $daily_interval);
  }

  $next_weekly_execution  = \Drupal::state()->get('community_notifier.weekly_next_execution');
  $next_weekly_execution = !empty($next_weekly_execution) ? $next_weekly_execution : 0;

  if (\Drupal::time()->getRequestTime() >= $next_weekly_execution){
    $comments = \Drupal::service('community_notifier.nodeflags')->getComments('weekly');
    foreach ($comments as $comment){
      communityNnotifierEmailQueue($comment['email'], $comment['comments']['subject'], $comment['comments']['body']);
    }
    \Drupal::state()->set('community_notifier.weekly_next_execution', \Drupal::time()->getRequestTime() + $weekly_interval);
  }
}
