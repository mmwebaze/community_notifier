<?php

/**
 * @file
 * Contains community_notifier.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\comment\CommentInterface;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\community_notifier\Util\CommunityNotifierUtility;

define("DAILY", 86400);
define("WEEKLY", 604800);

/**
 * Implements hook_help().
 */
function community_notifier_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the community_notifier module.
    case 'help.page.community_notifier':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function community_notifier_theme() {
  return [
    'community_notifier' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function community_notifier_comment_insert(CommentInterface $comment) {
  $commentedEntityId = $comment->getCommentedEntityId();
  $notificationEntities = \Drupal::service('community_notifier.nodeflags')->getNotificationEntitiesById($commentedEntityId,
    \Drupal::currentUser()->id(), '=');
  //$currentUser = \Drupal::currentUser()->getEmail();

  foreach ($notificationEntities as $notificationEntity) {
    $frequency = $notificationEntity->getFrequency();

    if ($frequency == 'immediately'){
      community_notifier_emailer('community_notifier', 'comment_insert_alert', $notificationEntity->getOwner()->getEmail(),
        $comment->getSubject(), $comment->get('comment_body')->value, $notificationEntity->getOwner()->getUsername());
    }
  }
}
/**
 * Implements hook_theme().
 */
function community_notifier_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'comment_insert_alert':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['subject']), $options);
      $message['body'][] = $params['message'];
      break;
    case 'query_mail':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['subject']));
      $message['body'][] = $params['message'];
      break;
  }
}
/**
 * @param $module see hook_mail documentation.
 * @param $key see hook_mail documentation.
 * @param $to see hook_mail documentation.
 * @param $subject see hook_mail documentation.
 * @param $message see hook_mail documentation.
 * @param $username drupal username of entity receiving the email.
 */
function community_notifier_emailer($module, $key, $to, $subject, $message, $username) {
  $mailManager = \Drupal::service('plugin.manager.mail');
  $params['message'] = $message;
  $params['subject'] = $subject;
  $langcode = \Drupal::currentUser()->getPreferredLangcode();//should be changed to system lang
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, true);
  if ($result['result'] !== true) {
    \Drupal::logger('community_notifier')->error(t('There was a problem sending an email to user '.$username));
  }
}
/**
 * Implements hook_form_alter().
 */
function community_notifier_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch($form_id){
    case 'user_form':
      $notEntities = \Drupal::service('community_notifier.nodeflags')->getUserNotificationEntities(\Drupal::currentUser()->id());
      $dropdown_array = [
        'immediately' => 'immediately',
        'daily' => 'daily',
        'weekly' => 'weekly'
      ];
      $form['subscriptions'] = array(
        '#type' => 'fieldset',
        '#title' => 'Subscriptions',
      );
      $header = [
        'id' => t('#'),
        'topic' => t('Topic'),
        'flag' => t('Flag'),
        'frequency' => t('Frequency'),
      ];
      $form['subscriptions']['table'] = [
        '#type' => 'table',
        '#header' => $header,
        '#tabledrag' => FALSE,
        '#empty' => t('No subscriptions available.'),
      ];
      $field_count = 1;

      foreach ($notEntities as $ent){
        $form['subscriptions']['table'][$field_count]['id'] = [
          '#type' => 'hidden',
          '#value' => $ent->id(),
          //'#column' => 'one',
        ];

        $form['subscriptions']['table'][$field_count]['topic'] = [
          '#type' => 'label',
          '#title' => $ent->getFlaggedEntityName(),
          //'#column' => 'one',
        ];
        $form['subscriptions']['table'][$field_count]['flag'] = [
          '#type' => 'label',
          '#title' => $ent->getFlagId(),
          //'#column' => 'one',
        ];
        $form['subscriptions']['table'][$field_count]['frequency'] = [
          '#type' => 'select',
          '#default_value' => $ent->getFrequency(),
          '#options' => $dropdown_array,
        ];
        $field_count++;
      }
      $form['actions']['submit']['#submit'][] = 'community_notifier_user_from_submit';
      return $form;
      break;
    case 'community_notifier_frequency_edit_form':
      $form['name']['#disabled'] = TRUE;
      $form['flag_id']['#disabled'] = TRUE;
      $form['entity_id']['#disabled'] = TRUE;
      $form['entity_name']['#disabled'] = TRUE;
      $dropdown_array = [
        'immediately' => 'immediately',
        'daily' => 'daily',
        'weekly' => 'weekly'
      ];
      $form['frequency']['widget'][0]['value'] = array(
        '#type' => 'select',
        '#default_value' => '1',
        '#options' => $dropdown_array,
      );

      break;
  }
}

/**
 * Implements hook_form_submit().
 */
function community_notifier_user_from_submit(array  $form, FormStateInterface $form_state){

  $subscriptions = $form_state->getValue('table');
  foreach ($subscriptions as $subscription){
    $newSubscription = $subscription['frequency'];
    $notificationEntity = \Drupal::service('community_notifier.nodeflags')->updateNotificationEntity($subscription['id'], $newSubscription);
    $oldSubscription = $notificationEntity->getFrequency();

    //checks if old subscription is different from selected subscription and if different update notifications.
    if ($oldSubscription != $newSubscription){
      $notificationEntity->setFrequency($newSubscription);
      $notificationEntity->save();
    }
  }
}

/**
 * Adds email to queue
 *
 * @param string $to
 *   Receipient email.
 * @param string $subject
 *   Email subject.
 * @param string $message
 *   Email body message.
 */
function communityNotifierEmailQueue($to, $subject, $message) {
  $data['to'] = $to;
  $data['subject'] = $subject;
  $data['message'] = $message;

  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get('email_queue');
  $queue->createQueue();
  $queue->createItem($data);
}
/**
 * Implements hook_cron().
 */
function community_notifier_cron(){
  $daily_interval = 60; //DAILY;
  $weekly_interval = 120; //WEEKLY;

  $next_daily_execution  = \Drupal::state()->get('community_notifier.daily_next_execution');
  $next_daily_execution = !empty($next_daily_execution) ? $next_daily_execution : 0;

  //executes daily
  if (\Drupal::time()->getRequestTime() >= $next_daily_execution){
    $comments = \Drupal::service('community_notifier.nodeflags')->getComments('daily');
    foreach ($comments as $comment){
      communityNotifierEmailQueue($comment['email'], $comment['comments']['subject'], $comment['comments']['body']);
    }
    \Drupal::state()->set('community_notifier.daily_next_execution', \Drupal::time()->getRequestTime() + $daily_interval);
  }

  $next_weekly_execution  = \Drupal::state()->get('community_notifier.weekly_next_execution');
  $next_weekly_execution = !empty($next_weekly_execution) ? $next_weekly_execution : 0;
  //executes weekly
  if (\Drupal::time()->getRequestTime() >= $next_weekly_execution){
    $comments = \Drupal::service('community_notifier.nodeflags')->getComments('weekly');
    foreach ($comments as $comment){
      $body = \Drupal\community_notifier\Util\CommunityNotifierUtility::mergeBodies($comment['comments']);
      communityNotifierEmailQueue($comment['email'], $comment['subject'], $body);
    }
    \Drupal::state()->set('community_notifier.weekly_next_execution', \Drupal::time()->getRequestTime() + $weekly_interval);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function community_notifier_node_insert(Drupal\Core\Entity\EntityInterface $entity){
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('forum')){
    $forumService = \Drupal::service('forum_manager');
    $isForumType = $forumService->checkNodeType($entity);

    if ($isForumType){
      $forum_index_storage = \Drupal::service('forum.index_storage');
      $term_id = $forum_index_storage->getOriginalTermId($entity);
      $flagEntity = \Drupal::service('community_notifier.nodeflags')->getFlagEntityById('subscribe');

      $currentUserId = \Drupal::currentUser()->id();
      $notificationEntities = \Drupal::service('community_notifier.nodeflags')->getNotificationEntitiesByForum($term_id);

      $nodeBodies = [];
      $nodeBody['body'] = $entity->get('body')->value;
      array_push($nodeBodies, $nodeBody);
      $body = CommunityNotifierUtility::mergeBodies($nodeBodies);

      foreach ($notificationEntities as $notificationEntity){
        $subscribedUser = $notificationEntity->getOwner();
        //checks if current topic creater is subscribed to forum
        if ($currentUserId == $subscribedUser->id()){
          \Drupal::service('flag')->flag($flagEntity, $entity, \Drupal::currentUser());
          \Drupal::service('community_notifier.nodeflags')->flag($flagEntity->id(), $entity->id());
        }
        $email = $subscribedUser->getEmail();
        $subject = 'Forum: '.$notificationEntity->getFlaggedEntityName().' has new topic';

        communityNotifierEmailQueue($email, $subject, $body);
      }
    }
  }
}
/**
 * Implements hook_module_implements_alter().
 */
function community_notifier_module_implements_alter(&$implementations, $hook) {

  if($hook == 'node_insert'){
    $group = $implementations['community_notifier'];
    unset($implementations['community_notifier']);
    $implementations['community_notifier'] = $group;
  }
}

/**
 * Implements hook_entity_predelete().
 */
function community_notifier_entity_predelete(Drupal\Core\Entity\EntityInterface $entity){
  $bundle = $entity->bundle();

  if ($bundle == 'forum' || $bundle == 'forums' || $bundle == 'article'){
    $communityService = \Drupal::service('community_notifier.nodeflags');
    if ($bundle == 'forums'){
      $entities = \Drupal::service('community_notifier.nodeflags')->getForumTopics($entity->id());
      $communityService->deleteSubscriptions($entity->id());
      foreach ($entities as $ent){
        $communityService->deleteSubscriptions($ent->id());
      }
    }

    $communityService->deleteSubscriptions($entity->id());
  }
}
function community_notifier_views_data_alter(array &$data) {
 //var_dump(json_encode(array_keys($data['search_api_index_aidsfree_index']), 1));die();

  $data['search_api_index_aidsfree_index']['flagging'] = array(
    'title' => t('Flagging'),
    'help' => t('More information about the relationship'),

    'relationship' => array(
      'group' => 'Flag',
      // Views name of the table being joined to from foo.
      'base' => 'flagging',
      // Database field name in example_table for the join.
      'base field' => 'entity_id',
      // Real database field name in foo for the join, to override
      // 'unique_dummy_name'.
      'field' => 'nid',
      // ID of relationship handler plugin to use.
      'id' => 'standard',
      'label' => t('Default label for relationship'),
    ),
  );

  /*$data['search_api_db_aidsfree_index']['nid_custom'] = array(
    'title' => t('Flagging'),
    'help' => t('More information about the relationship'),

    'relationship' => array(
      // Views name of the table being joined to from foo.
      'base' => 'flagging',
      // Database field name in example_table for the join.
      'base field' => 'entity_id',
      // Real database field name in foo for the join, to override
      // 'unique_dummy_name'.
      'field' => 'nid',
      // ID of relationship handler plugin to use.
      'id' => 'standard',
      'label' => t('Default label for relationship'),
    ),
  );*/
//var_dump($data['search_api_index_aidsfree_index']);die();

}